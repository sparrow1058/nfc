package com.example.bluetooth;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.UUID;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

public class MainActivity extends Activity {
	static final private int MENU_Exit = Menu.FIRST;
	static final private int MENU_DISCOVER = Menu.FIRST+1;
	static final private int MENU_DISCOVERABLE = Menu.FIRST+2;
	static final private int MENU_SEND = Menu.FIRST+3;
	static final String SPP_UUID="00001101-0000-1000-8000-00805F9B34FB";
	static final UUID uuid=UUID.fromString(SPP_UUID);
	static final String tag="BT";
	static final boolean D=true;
	private int BUFFERLENGTH=1024;
	
	ListView devList;
	ArrayList<String> devices=new ArrayList<String>();
	ArrayAdapter<String> devAdapter;
	BluetoothAdapter btAdapt;
	BluetoothSocket btSocket;
	private BluetoothServerSocket btServerSocket;
	InputStream btIn=null;
	OutputStream btOut=null;
	SppServer sppServer;
	boolean sppConnected=false;
	//SppServer sppServer;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		devList=(ListView)findViewById(R.id.btlist);
		devAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,devices);
		devList.setAdapter(devAdapter);
		btAdapt=BluetoothAdapter.getDefaultAdapter();
		IntentFilter intent=new IntentFilter();
		intent.addAction(BluetoothDevice.ACTION_FOUND);
		intent.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
		intent.addAction(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED);
		intent.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
		registerReceiver(bluetoothReceiver,intent);
		
		//Search bluetoothDevice 
//		devList.setOnItemClickListener(new OnItemClickListerner(){
		devList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position,
					long id) {
				// TODO 自动生成的方法存根
				if(sppConnected)
					return ;
				String devAddr=((String)devices.get(position)).split("\n")[1];
				try{
					btSocket=btAdapt.getRemoteDevice(devAddr).createRfcommSocketToServiceRecord(uuid);
					btSocket.connect();
					synchronized (getApplicationContext()){
						if(sppConnected)
							return;
						btServerSocket.close();
						btIn=btSocket.getInputStream();
						btOut=btSocket.getOutputStream();
						connected();
					}
				}catch (IOException e)
				{
					e.printStackTrace();
					sppConnected=false;
					try{
						btSocket.close();
					}catch (IOException e1){
						e1.printStackTrace();
					}
					btSocket=null;
					Toast.makeText(getApplicationContext(), "Spp connect error!", Toast.LENGTH_SHORT).show();
				}
				
			}	

		});
		sppServer = new SppServer();
		sppServer.start();
	}

	protected void onDestroy(){
		super.onDestroy();
		if(sppServer!=null)
			sppServer.cancel();
		this.unregisterReceiver(bluetoothReceiver);
		if(btIn!=null){
			try{
				btSocket.close();
				btServerSocket.close();
			}catch (IOException e){
				e.printStackTrace();
			}
		}
		android.os.Process.killProcess(android.os.Process.myPid());
	}
	Handler btHandler=new Handler(){
		public void handleMessage(Message m )
		{
			
		}
	};
	
	private BroadcastReceiver bluetoothReceiver=new BroadcastReceiver(){
	
		@Override
		public void onReceive(Context context, Intent intent) {
			// TODO 自动生成的方法存根
			String action = intent.getAction();
			Bundle b= intent.getExtras();
			Object[] lstName=b.keySet().toArray();
			for(int i=0;i<lstName.length;i++){
				String keyName=lstName[i].toString();
				Log.i(keyName,String.valueOf(b.get(keyName)));
			}
			//show Mac address
			if(BluetoothDevice.ACTION_FOUND.equals(action)){
				BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				String str=device.getName()+"\n"+device.getAddress();
				if(devices.indexOf(str)==-1)
					devices.add(str);
				devAdapter.notifyDataSetChanged();
			}
			else if(BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)){
			}
		}
	};
	protected void connected() {
		// TODO 自动生成的方法存根
		sppConnected=true;
		devList.setClickable(false);
		sppServer=null;
	}  
	public void disconnect() {
		// TODO 自动生成的方法存根
		devList.setClickable(true);
		sppConnected=false;
		btIn=null;
		btOut=null;
		sppServer=new SppServer();
		sppServer.start();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		//getMenuInflater().inflate(R.menu.main, menu);
    	menu.add(0, MENU_Exit, 0, "Exit");
    	menu.add(0, MENU_DISCOVER, 1, "DISCOVER");
    	menu.add(0, MENU_DISCOVERABLE, 2, "DISCOVERABLE");
    	menu.add(0, MENU_SEND, 3, "SEND SP");
		return true;
	}
    public boolean onOptionsItemSelected(MenuItem item) 
    {
		Log.v(tag,"itemid="+item.getItemId());
    	switch(item.getItemId()) 
    	{
    	case MENU_Exit:
    		MainActivity.this.finish();
    		android.os.Process.killProcess(android.os.Process.myPid());
    		System.exit(0);
    		break;
    	case MENU_DISCOVER:
    		btAdapt.cancelDiscovery();
    		btAdapt.startDiscovery();
    		break;
    	case MENU_DISCOVERABLE:
    		Intent discoverableIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
    		discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 100);
    		startActivity(discoverableIntent);
    		break;
    	case MENU_SEND:
    		
    	
    	
    	}
    	return true;
    }
    private void ForceFlushOutputBuffer()
    {
    	try{
    		btOut.flush();
    	}catch(IOException e){
    		e.printStackTrace();
    	}
    }
    private void ForceBlueSppSend(byte[] buffer)
    {
    	try{
    		btOut.write(buffer);
    	}catch(IOException e){
    		e.printStackTrace();
    	}
    }
    private void ForceBlueSppRecv()
    {
    	int received_bytes_count=0;
    }
    //SPP Server
    private class SppServer extends Thread{
    	public SppServer(){
    		try{
    			btServerSocket=btAdapt.listenUsingRfcommWithServiceRecord("SPP", uuid);
    		}catch(IOException e){
    			e.printStackTrace();
    			btServerSocket=null;
    		}
    	}
    	public void run(){
    		BluetoothSocket bs=null;
    		if(btServerSocket==null){
    			Log.e(tag,"server socket null");
    			return ;
    		}
    		try{
    			bs=btServerSocket.accept();
    			synchronized (getApplicationContext()){
    				if(sppConnected)
    					return;
    				Log.i(tag,"device name: "+bs.getRemoteDevice().getName());
    				btIn=bs.getInputStream();
    				btOut=bs.getOutputStream();
    				connected();
    			}
    		}catch (IOException e){
    			e.printStackTrace();
    			Log.d(tag,"server Socket accept faile");
    		}
    		if(D)
    			Log.i(tag,"End Bluetooth SPP Server");
    		
    	}
    	public void cancel(){
    		if(btServerSocket==null)
    			return ;
    		try{
    			btServerSocket.close();
    		}catch (IOException e){
    			e.printStackTrace();
    			Log.e(tag,"close Server socket faile");
    		}
    	}
    }
    private class SppReceiver extends Thread{
    	private InputStream input=null;
    	public SppReceiver(InputStream in){
    		input=in;
    		Log.i(tag,"Spp Receiver");
    		
    	}
    	public void run(){
    		byte[] data=new byte[1024];
    		int length=0;
    		String msg="";
    		if(input==null){
    			Log.d(tag,"inputstream null");
    			return ;
    		}
    		while(true){
    			try{
    				length=input.read(data);
    				Log.i(tag,"SPP receiver");
    				if(length>0){
    					msg="";
    					for(int i=0;i<length;i++){
    						msg+=Integer.toHexString(data[i]&0xFF)+" ";
    					}
    					Log.i(tag,"R: "+msg);
    					
    				}
    			}catch (IOException e){
    				Log.e(tag,"disconnect");
    				disconnect();
    			}
    		}
    	}

    }
}
